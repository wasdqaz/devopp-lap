def BRANCH_NAME = "main"
def SERVICE_NAME
def IMAGE_TAG
def PORT = [
    "spring-petclinic-config-server" : 8888,
    "spring-petclinic-discovery-server" : 8761,
    "spring-petclinic-api-gateway" : 8080,
    "spring-petclinic-admin-server" : 9090,
    "spring-petclinic-genai-service" : 8084,
    "spring-petclinic-vets-service" : 8083,
    "spring-petclinic-customers-service" : 8081,
    "spring-petclinic-visits-service" : 8082

]
def SERVICE_MAP = [
    "spring-petclinic-config-server" : "config-server",
    "spring-petclinic-discovery-server" : "discovery-server",
    "spring-petclinic-api-gateway" : "api-gateway",
    "spring-petclinic-admin-server" : "admin-server",
    "spring-petclinic-genai-service" : "genai-service",
    "spring-petclinic-vets-service" : "vets-service",
    "spring-petclinic-customers-service" : "customers-service",
    "spring-petclinic-visits-service" : "visits-service"
]
pipeline {
    agent any

    environment {
        DEFAULT_MODULES = "spring-petclinic-admin-server,spring-petclinic-api-gateway,spring-petclinic-config-server,spring-petclinic-customers-service,spring-petclinic-discovery-server,spring-petclinic-genai-service,spring-petclinic-vets-service,spring-petclinic-visits-service"
    }

    parameters {
        string(name: 'spring-petclinic-admin-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-admin-server')
        string(name: 'spring-petclinic-api-gateway', defaultValue: 'main', description: 'Branch to build for spring-petclinic-api-gateway')
        string(name: 'spring-petclinic-config-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-config-server')
        string(name: 'spring-petclinic-customers-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-customers-service')
        string(name: 'spring-petclinic-discovery-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-discovery-server')
        string(name: 'spring-petclinic-genai-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-genai-service')
        string(name: 'spring-petclinic-vets-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-vets-service')
        string(name: 'spring-petclinic-visits-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-visits-service')
        // Thêm các parameter cho module khác nếu có trong DEFAULT_MODULES
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"
        
                        env.DEFAULT_MODULES.tokenize(',').each { module ->
                            def targetBranch = params."${module}"?.trim()
                            echo "Parameter '${module}': ${targetBranch}"
                            def imageName = "${DOCKERHUB_USER}/${module}"
                            def imageTag = "${imageName}:latest"
                            echo "Building service: ${module} from branch: ${targetBranch}"

                            if (targetBranch != "main"){
                                // Tag image với commit ID của HEAD
                                IMAGE_TAG = commitId

                                // Set các biến môi trường cho service
                                SERVICE_NAME = module

                                // Set tên branch cho service
                                BRANCH_NAME = targetBranch
                                imageTag = "${imageName}:${commitId}"
                            }
                            checkout([$class: 'GitSCM', branches: [[name: targetBranch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: scm.userRemoteConfigs[0].url]]])
                            sh "git branch"
                                dir(module) {
                                  // Tag image với commit ID của HEAD sau khi build
                                  if (targetBranch != "main"){
                                    echo "Building service: ${module} from branch: ${targetBranch}"
                                    sh '../mvnw package -DskipTests'
                                    def builtCommitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                                    sh "docker build -t ${imageTag} ."
                                    sh "docker push ${imageTag}"
                                  }
                              }

                            // Checkout branch cụ thể và build service đó
                            

                        }
                    }
                }
            }
        }
        
   stage('Create check out env') {
  steps {
    script {
      def branch = BRANCH_NAME
      def commitId = IMAGE_TAG

      // Clean up workspace clone first
      sh "rm -rf config-repo"

      withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
        sh """
          git clone https://${GIT_USER}:${GIT_PASS}@github.com/wasdqaz/spring-petclinic-microservices-config.git config-repo
        """
        
        dir("config-repo") {
          // Create required folders
          sh "mkdir -p values/checkout-dev/checkout-dev-${branch}"
          sh "mkdir -p ingress/checkout-dev"
          sh "mkdir -p environment/checkout-dev/checkout-dev-${branch}"

          def services = env.DEFAULT_MODULES.tokenize(',')

          services.each { svc ->
            def port = PORT[svc]
            def imgTag = (svc == SERVICE_NAME) ? commitId : "latest"  // Only update latest commit for the one built

            writeFile file: "values/checkout-dev/checkout-dev-${branch}/values-${SERVICE_MAP[svc]}.yaml", text: """
image:
  repository: 22127210/${svc}
  tag: "${imgTag}"
  pullPolicy: IfNotPresent

replicas: 1

service:
  port: ${port}
  type: ClusterIP
  name: ${SERVICE_MAP[svc]}

env:
  - name: SPRING_PROFILES_ACTIVE
    value: docker
  - name: CONFIG_SERVER_URL
    value: http://config-server:8888
  - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
    value: http://discovery-server:8761/eureka
  - name: EUREKA_INSTANCE_HOSTNAME
    value: ${SERVICE_MAP[svc]} 

resources:
  limits:
    cpu: "500m"
    memory: "512Mi"
  requests:
    cpu: "200m"
    memory: "256Mi"

readinessProbe:
  path: /actuator/health
  port: ${port}
  initialDelaySeconds: 30
  periodSeconds: 10

livenessProbe:
  path: /actuator/health
  port: ${port}
  initialDelaySeconds: 60
  periodSeconds: 15
"""

            // One shared ingress file (optional — adjust if needed)
            writeFile file: "ingress/checkout-dev/${branch}-ingress.yaml", text: """
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${branch}-ingress
  namespace: checkout-dev-${branch}
spec:
  rules:
    - host: ${branch}.petclinic.local
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: ${svc}
                port:
                  number: ${port}
"""

            // One Application file per service
            writeFile file: "environment/checkout-dev/checkout-dev-${branch}/${svc}.yaml", text: """
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${svc}
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  labels:
    environment: checkout-dev
spec:
  project: default
  source:
    repoURL: https://github.com/wasdqaz/spring-petclinic-microservices-config.git
    path: charts/spring-petclinic-chart
    targetRevision: HEAD
    helm:
      valueFiles:
        - ../../values/checkout-dev/${branch}/values-${svc}.yaml
      releaseName: ${SERVICE_MAP[svc]}
  destination:
    server: https://kubernetes.default.svc
    namespace: checkout-dev-${branch}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true
      - ApplyOutOfSyncOnly=true
"""
          } // end of service loop

          // Commit all files
          sh """
            git config user.name "jenkins"
            git config user.email "jenkins@company.com"
            git add .
            git commit -m "[checkout-dev] ${branch}: all services -> ${commitId}"
            git push
          """
        }
      }
    }
  }
}
        stage('Attach Link') {
                    steps {
                        script {
                            currentBuild.displayName = "Display name #${currentBuild.number}"
                            currentBuild.description = "Build description #${currentBuild.number} [ABC](http://cicd.petclinic.local/)"
                        }
                        
                    }
                }
    }// end of stages

    post {
        always {
            echo 'Pipeline execution completed'
            echo 'Cleanning'
            cleanWs()
            
        }
        success {
            echo 'Pipeline finished successfully'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors'
        }
    }
}
