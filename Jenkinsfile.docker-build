pipeline {
    agent any

    environment {
        DEFAULT_MODULES = "spring-petclinic-admin-server,spring-petclinic-api-gateway,spring-petclinic-config-server,spring-petclinic-customers-service,spring-petclinic-discovery-server,spring-petclinic-genai-service,spring-petclinic-vets-service,spring-petclinic-visits-service"
    }

    parameters {
        string(name: 'spring-petclinic-admin-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-admin-server')
        string(name: 'spring-petclinic-api-gateway', defaultValue: 'main', description: 'Branch to build for spring-petclinic-api-gateway')
        string(name: 'spring-petclinic-config-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-config-server')
        string(name: 'spring-petclinic-customers-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-customers-service')
        string(name: 'spring-petclinic-discovery-server', defaultValue: 'main', description: 'Branch to build for spring-petclinic-discovery-server')
        string(name: 'spring-petclinic-genai-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-genai-service')
        string(name: 'spring-petclinic-vets-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-vets-service')
        string(name: 'spring-petclinic-visits-service', defaultValue: 'main', description: 'Branch to build for spring-petclinic-visits-service')
        // Thêm các parameter cho module khác nếu có trong DEFAULT_MODULES
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"
        
                        env.DEFAULT_MODULES.tokenize(',').each { module ->
                            def targetBranch = params."${module}"?.trim()
                            echo "Parameter '${module}': ${targetBranch}"
                            def imageName = "${DOCKERHUB_USER}/${module}"
                            def imageTag = "${imageName}:latest"
                            echo "Building service: ${module} from branch: ${targetBranch}"

                            if (targetBranch != "main"){
                                // Tag image với commit ID của HEAD
                                env.IMAGE_TAG = commitId

                                // Set các biến môi trường cho service
                                env.SERVICE_NAME = module

                                // Set tên branch cho service
                                env.FEATURE_NAME = targetBranch
                                imageTag = "${imageName}:${commitId}"
                                // Checkout branch cụ thể và build service đó
                                checkout([$class: 'GitSCM', branches: [[name: targetBranch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: scm.userRemoteConfigs[0].url]]])
                                dir(module) {
                                    echo "Building service: ${module} from branch: ${targetBranch}"
                                    sh '../mvnw package -DskipTests'
                                    // Tag image với commit ID của HEAD sau khi build
                                    def builtCommitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                                    sh "docker build -t ${imageTag} ."
                                    sh "docker push ${imageTag}"
                                }
                            }
                            

                        }
                    }
                }
            }
        }
        
    stage('Generate GitOps Files') {
      steps {
        script {
          def feature = params.FEATURE_NAME
          def svc = params.SERVICE_NAME
          def commitId = env.IMAGE_TAG

          sh "rm -rf config-repo"
          withCredentials([usernamePassword(credentialsId: 'github-credentials',
            usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
            sh """
              git clone https://${GIT_USER}:${GIT_PASS}@github.com/wasdqaz/spring-petclinic-microservices-config.git config-repo
            """
            dir("config-repo") {
              // Tạo folder cho feature nếu chưa có
              sh "mkdir -p values/checkout_dev/${feature}"

              // Ghi file Helm values override
              writeFile file: "values/checkout_dev/${feature}/values-${svc}.yaml", text: """
image:
  repository: 22127210/spring-petclinic-${svc}
  tag: "${commitId}"
  pullPolicy: IfNotPresent

replicas: 1

service:
  port: 8080
  type: ClusterIP

env:
  - name: SPRING_PROFILES_ACTIVE
    value: docker
  - name: CONFIG_SERVER_URL
    value: http://config-server.petclinic-core.svc.cluster.local:8888
  - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
    value: http://discovery-server.petclinic-core.svc.cluster.local:8761/eureka
"""

              // Optionally, generate ingress for this checkout_dev
              sh "mkdir -p ingress/checkout_dev"
              writeFile file: "ingress/checkout_dev/${feature}-ingress.yaml", text: """
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${feature}-ingress
  namespace: checkout_dev-${feature}
spec:
  rules:
    - host: ${feature}.petclinic.local
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: ${svc}
                port:
                  number: 8080
"""

              // Commit & push
              sh """
                git config user.name "jenkins"
                git config user.email "jenkins@company.com"
                git add .
                git commit -m "[checkout_dev] ${feature}: ${svc} -> ${commitId}"
                git push
              """
            }
          }
        }
      }
    }// end of stage Generate GitOps Files

    }// end of stages

    post {
        always {
            echo 'Pipeline execution completed'
            echo 'Cleanning'
            cleanWs()
            
        }
        success {
            echo 'Pipeline finished successfully'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors'
        }
    }
}
