pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Checkout and Build Services') {
            steps {
                script {
                    // Define all services
                    def services = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service'
                    ]
                    
                    // Map of services to their branches
                    def branchMap = [
                        'spring-petclinic-admin-server': params.branch_admin_server,
                        'spring-petclinic-api-gateway': params.branch_api_gateway,
                        'spring-petclinic-config-server': params.branch_config_server,
                        'spring-petclinic-customers-service': params.branch_customers_service,
                        'spring-petclinic-discovery-server': params.branch_discovery_server,
                        'spring-petclinic-vets-service': params.branch_vets_service,
                        'spring-petclinic-visits-service': params.branch_visits_service
                    ]
                    
                    // Log which branches will be used
                    echo "Services will be built from these branches:"
                    branchMap.each { service, branch ->
                        echo "${service}: ${branch}"
                    }
                    
                    // Create a directory for each service
                    services.each { service ->
                        sh "mkdir -p ${service}"
                    }
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials', 
                        usernameVariable: 'GIT_USERNAME', 
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        // Clone and checkout each service
                        services.each { service ->
                            def branch = branchMap[service]
                            dir(service) {
                                // Clone the repository with the specific branch
                                sh """
                                git clone -b ${branch} https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/wasdqaz/https://github.com/wasdqaz/devopp-lap.git .
                                git checkout ${branch}
                                """
                                
                                // Build the service
                                sh "../mvnw clean package -DskipTests"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build & Push Docker Images') {
            steps {
                script {
                    def services = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service'
                    ]
                    
                    def branchMap = [
                        'spring-petclinic-admin-server': params.branch_admin_server,
                        'spring-petclinic-api-gateway': params.branch_api_gateway,
                        'spring-petclinic-config-server': params.branch_config_server,
                        'spring-petclinic-customers-service': params.branch_customers_service,
                        'spring-petclinic-discovery-server': params.branch_discovery_server,
                        'spring-petclinic-vets-service': params.branch_vets_service,
                        'spring-petclinic-visits-service': params.branch_visits_service
                    ]
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKERHUB_USER',
                        passwordVariable: 'DOCKERHUB_PASSWORD'
                    )]) {
                        sh "docker login -u \${DOCKERHUB_USER} -p \${DOCKERHUB_PASSWORD}"
                        
                        services.each { service ->
                            dir(service) {
                                def branch = branchMap[service]
                                def imageTag = "${DOCKERHUB_USER}/${service}:${branch}"
                                
                                // If it's main branch, also tag as latest
                                sh "docker build -t ${imageTag} ."
                                sh "docker push ${imageTag}"
                                
                                if (branch == 'main') {
                                    sh "docker tag ${imageTag} ${DOCKERHUB_USER}/${service}:latest"
                                    sh "docker push ${DOCKERHUB_USER}/${service}:latest"
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Dev Kubernetes') {
            steps {
                script {
                    def services = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service'
                    ]
                    
                    def branchMap = [
                        'spring-petclinic-admin-server': params.branch_admin_server,
                        'spring-petclinic-api-gateway': params.branch_api_gateway,
                        'spring-petclinic-config-server': params.branch_config_server,
                        'spring-petclinic-customers-service': params.branch_customers_service,
                        'spring-petclinic-discovery-server': params.branch_discovery_server,
                        'spring-petclinic-vets-service': params.branch_vets_server,
                        'spring-petclinic-visits-service': params.branch_visits_service
                    ]
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKERHUB_USER',
                        passwordVariable: 'DOCKERHUB_PASSWORD'
                    )]) {
                        // Clone the GitOps config repo
                        sh "rm -rf spring-petclinic-microservices-config || true"
                        
                        withCredentials([usernamePassword(
                            credentialsId: 'github-credentials', 
                            usernameVariable: 'GIT_USERNAME', 
                            passwordVariable: 'GIT_PASSWORD'
                        )]) {
                            sh "git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com/wasdqaz/spring-petclinic-microservices-config.git"
                            
                            dir('spring-petclinic-microservices-config') {
                                // Update values files with the appropriate branch as tag
                                services.each { service ->
                                    def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                                    def branch = branchMap[service]
                                    def valuesFile = "values/dev/values-${shortServiceName}.yaml"
                                    
                                    sh """
                                    if [ -f "${valuesFile}" ]; then
                                        echo "Updating image tag in ${valuesFile} to ${branch}"
                                        sed -i 's/\\(tag:\\s*\\).*/\\1"${branch}"/' ${valuesFile}
                                    else
                                        echo "Warning: ${valuesFile} not found"
                                    fi
                                    """
                                }
                                
                                // Configure NodePort for API Gateway to make it accessible
                                sh """
                                if [ -f "values/dev/values-api-gateway.yaml" ]; then
                                    echo "Setting API Gateway service to NodePort"
                                    if ! grep -q "type: NodePort" values/dev/values-api-gateway.yaml; then
                                        echo "service:" >> values/dev/values-api-gateway.yaml
                                        echo "  type: NodePort" >> values/dev/values-api-gateway.yaml
                                        echo "  nodePort: 30080" >> values/dev/values-api-gateway.yaml
                                    fi
                                fi
                                """
                                
                                // Commit and push changes
                                sh """
                                git config user.email "jenkins@example.com"
                                git config user.name "Jenkins Developer Build"
                                git status
                                
                                if ! git diff --quiet; then
                                    git add .
                                    git commit -m "Update image tags for developer testing"
                                    git push
                                    echo "✅ Successfully updated GitOps repository for developer testing"
                                else
                                    echo "ℹ️ No changes to commit in GitOps repository"
                                fi
                                """
                                
                                // Deploy using Helm (assuming ArgoCD or Flux isn't handling it automatically)
                                sh """
                                helm upgrade --install petclinic-dev ./helm/petclinic -f values/dev/values.yaml
                                """
                                
                                // Get worker node IP
                                def workerNodeIP = sh(script: "kubectl get nodes -o wide | grep worker | awk '{print \$6}' | head -1", returnStdout: true).trim()
                                
                                echo """
                                =====================================================
                                🎉 DEPLOYMENT COMPLETE 🎉
                                
                                Add this entry to your /etc/hosts file:
                                ${workerNodeIP} petclinic.dev
                                
                                Access your deployed services at:
                                http://petclinic.dev:30080
                                
                                For individual services:
                                - Admin Server: http://petclinic.dev:30080/admin
                                - API Gateway: http://petclinic.dev:30080
                                - Customers Service: http://petclinic.dev:30080/api/customer
                                - Vets Service: http://petclinic.dev:30080/api/vet
                                - Visits Service: http://petclinic.dev:30080/api/visit
                                =====================================================
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Developer build completed successfully!"
        }
        failure {
            echo "Developer build failed. Please check the logs."
        }
    }
}